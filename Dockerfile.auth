# Multi-stage Dockerfile for Authentication Service
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV POETRY_NO_INTERACTION=1
ENV POETRY_VENV_IN_PROJECT=1
ENV POETRY_CACHE_DIR=/opt/poetry-cache

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    libpq-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Dependencies stage
FROM base AS deps
WORKDIR /app

# Copy Poetry files
COPY packages/auth/pyproject.toml packages/auth/poetry.lock ./

# Configure Poetry to not create virtual environment since we're in a container
RUN poetry config virtualenvs.create false

# Install dependencies with verbose output for debugging
RUN poetry install --only=main --no-dev -vvv && rm -rf $POETRY_CACHE_DIR

# Development stage
FROM base AS development
WORKDIR /app

# Since we disabled venv creation, dependencies are installed globally
# Copy the global site-packages from deps stage
COPY --from=deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=deps /usr/local/bin /usr/local/bin

# Copy application code
COPY packages/auth/src ./src
COPY packages/auth/.env.example .env

# Expose port
EXPOSE 5000

# Run the application
CMD ["uvicorn", "src.app.main:app", "--host", "0.0.0.0", "--port", "5000", "--reload"]