version: '3.8'

services:
  # PostgreSQL Database (Enterprise Grade)
  postgres:
    image: postgres:15-alpine
    container_name: aiser-postgres-enterprise
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aiser_enterprise}
      POSTGRES_USER: ${POSTGRES_USER:-aiser_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-enterprise-db.sql:/docker-entrypoint-initdb.d/init-enterprise-db.sql
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/server.crt
      -c ssl_key_file=/etc/ssl/private/server.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiser_admin} -d ${POSTGRES_DB:-aiser_enterprise}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - aiser-internal
      - aiser-database

  # Redis Cache (Enterprise Grade)
  redis:
    image: redis:7-alpine
    container_name: aiser-redis-enterprise
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server
      /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - aiser-internal

  # Backend API Server (Enterprise Grade)
  backend-server:
    build:
      context: ./packages/chat2chart/server
      dockerfile: Dockerfile.enterprise
    container_name: aiser-backend-enterprise
    environment:
      # Database Configuration
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_enterprise}
      - POSTGRES_USER=${POSTGRES_USER:-aiser_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_SSL_MODE=require
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security Configuration
      - API_SECRET_KEY=${API_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Environment Configuration
      - ENVIRONMENT=enterprise
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # Enterprise Features
      - ENABLE_AUDIT_LOGS=true
      - ENABLE_RATE_LIMITING=true
      - ENABLE_API_MONITORING=true
      - ENABLE_DATA_ENCRYPTION=true
      
      # External Services
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=true
      
      # Monitoring
      - PROMETHEUS_ENDPOINT=/metrics
      - HEALTH_CHECK_ENDPOINT=/health
      
      # File Storage
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - STORAGE_PATH=/app/storage
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-100MB}
      
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./packages/chat2chart/server:/app
      - enterprise_storage:/app/storage
      - ./config/backend/logging.yaml:/app/config/logging.yaml
      - ./config/backend/security.yaml:/app/config/security.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aiser-internal
      - aiser-external
    command: >
      bash -c "
        echo 'ðŸš€ Starting Aiser Enterprise Backend Server...' &&
        python scripts/setup_enterprise_database.py &&
        gunicorn app.main:app 
        --bind 0.0.0.0:8000 
        --workers 4 
        --worker-class uvicorn.workers.UvicornWorker 
        --worker-connections 1000 
        --max-requests 1000 
        --max-requests-jitter 100 
        --timeout 30 
        --keep-alive 2 
        --access-logfile - 
        --error-logfile - 
        --log-level info
      "

  # Frontend Client (Enterprise Grade)
  frontend-client:
    build:
      context: ./packages/chat2chart/client
      dockerfile: Dockerfile.enterprise
    container_name: aiser-frontend-enterprise
    environment:
      - NEXT_PUBLIC_API_URL=${FRONTEND_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_ENVIRONMENT=enterprise
      - NEXT_PUBLIC_ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-false}
      - NEXT_PUBLIC_ENABLE_DEBUG=${ENABLE_DEBUG:-false}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./packages/chat2chart/client:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-server
    restart: unless-stopped
    networks:
      - aiser-internal
      - aiser-external
    command: >
      bash -c "
        echo 'ðŸš€ Starting Aiser Enterprise Frontend Server...' &&
        npm ci --only=production &&
        npm run build &&
        npm start
      "

  # Cube.js Server (Enterprise Grade)
  cube-server:
    build:
      context: ./packages/chat2chart/server/cube_helpers
      dockerfile: Dockerfile.enterprise
    container_name: aiser-cube-enterprise
    environment:
      - CUBEJS_API_SECRET=${CUBEJS_API_SECRET}
      - CUBEJS_DB_TYPE=postgres
      - CUBEJS_DB_HOST=postgres
      - CUBEJS_DB_NAME=${POSTGRES_DB:-aiser_enterprise}
      - CUBEJS_DB_USER=${POSTGRES_USER:-aiser_admin}
      - CUBEJS_DB_PASS=${POSTGRES_PASSWORD}
      - CUBEJS_DB_SSL=true
      - CUBEJS_DEV_MODE=false
      - CUBEJS_REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CUBEJS_CACHE_AND_QUEUE_DRIVER=redis
      - CUBEJS_PRE_AGGREGATIONS_SCHEMA=pre_aggregations
      - CUBEJS_SCHEDULED_REFRESH=true
      - CUBEJS_SCHEDULED_REFRESH_TIMER=60
    ports:
      - "${CUBE_PORT:-4000}:4000"
    volumes:
      - ./packages/chat2chart/server/cube_helpers:/cube/conf
      - ./packages/chat2chart/server/cube_schemas:/cube/conf/schema
      - cube_cache:/cube/conf/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aiser-internal
    command: >
      bash -c "
        echo 'ðŸš€ Starting Cube.js Enterprise Server...' &&
        npm ci --only=production &&
        npm run start
      "

  # Authentication Service (Enterprise Grade)
  auth-service:
    build:
      context: ./packages/auth
      dockerfile: Dockerfile.enterprise
    container_name: aiser-auth-enterprise
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_enterprise}
      - POSTGRES_USER=${POSTGRES_USER:-aiser_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL_MODE=require
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-3600}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENABLE_2FA=${ENABLE_2FA:-true}
      - ENABLE_SSO=${ENABLE_SSO:-false}
      - SAML_ENTITY_ID=${SAML_ENTITY_ID}
      - SAML_SSO_URL=${SAML_SSO_URL}
      - SAML_CERT=${SAML_CERT}
      - LDAP_SERVER=${LDAP_SERVER}
      - LDAP_BASE_DN=${LDAP_BASE_DN}
      - LDAP_BIND_DN=${LDAP_BIND_DN}
      - LDAP_BIND_PASSWORD=${LDAP_BIND_PASSWORD}
    ports:
      - "${AUTH_PORT:-5000}:5000"
    volumes:
      - ./packages/auth:/app
      - ./config/auth/saml:/app/config/saml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aiser-internal
      - aiser-external
    command: >
      bash -c "
        echo 'ðŸš€ Starting Authentication Service (enterprise)...' &&
        python scripts/setup_enterprise_database.py || true &&
        gunicorn src.app.main:app \
          --bind 0.0.0.0:5000 \
          --workers 2 \
          --worker-class uvicorn.workers.UvicornWorker \
          --timeout 30 \
          --access-logfile - \
          --error-logfile -
      "

  # Nginx Reverse Proxy (Enterprise Grade)
  nginx:
    image: nginx:alpine
    container_name: aiser-nginx-enterprise
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend-server
      - frontend-client
      - auth-service
    restart: unless-stopped
    networks:
      - aiser-external
    command: >
      bash -c "
        echo 'ðŸš€ Starting Nginx Enterprise Proxy...' &&
        nginx -g 'daemon off;'
      "

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aiser-prometheus-enterprise
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - aiser-internal

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aiser-grafana-enterprise
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - aiser-internal

  # Elasticsearch (for centralized logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: aiser-elasticsearch-enterprise
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - aiser-internal

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: aiser-kibana-enterprise
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - aiser-internal

  # Backup Service
  backup-service:
    build:
      context: ./packages/backup-service
      dockerfile: Dockerfile
    container_name: aiser-backup-enterprise
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_enterprise}
      - POSTGRES_USER=${POSTGRES_USER:-aiser_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_STORAGE_PATH=/backups
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - backup_storage:/backups
      - ./config/backup:/app/config
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aiser-database
    command: >
      bash -c "
        echo 'ðŸš€ Starting Backup Service...' &&
        python -m cron &&
        python main.py
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  enterprise_storage:
    driver: local
  cube_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_storage:
    driver: local

networks:
  aiser-internal:
    driver: bridge
    internal: true
  aiser-external:
    driver: bridge
  aiser-database:
    driver: bridge
    internal: true