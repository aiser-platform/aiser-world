services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aiser-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aiser_world}
      POSTGRES_USER: ${POSTGRES_USER:-aiser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiser_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiser} -d ${POSTGRES_DB:-aiser_world}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aiser-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Authentication Service
  auth-service:
    build:
      context: ./packages/auth
      dockerfile: Dockerfile.dev
    container_name: aiser-auth
    working_dir: /app
    env_file:
      - .env
    ports:
      - "5000:5000"
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_world}
      - POSTGRES_USER=${POSTGRES_USER:-aiser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiser_password}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - DEBUG=${DEBUG:-True}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./packages/auth:/app
      - auth_poetry_cache:/root/.cache/pypoetry
    command: >
      bash -c "
        poetry install --no-interaction --no-ansi || pip install -r requirements.txt ;
        poetry run uvicorn src.app.main:app --host 0.0.0.0 --port 5000 --reload
      "

  # Cube.js Universal Semantic Layer (official image)
  cube-server:
    image: cubejs/cube:latest
    container_name: aiser-cube
    env_file:
      - .env
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - CUBE_DB_TYPE=${CUBE_DB_TYPE:-postgres}
      - CUBE_DB_HOST=${CUBE_DB_HOST:-postgres}
      - CUBE_DB_PORT=${CUBE_DB_PORT:-5432}
      - CUBE_DB_NAME=${POSTGRES_DB:-aiser_world}
      - CUBE_DB_USER=${POSTGRES_USER:-aiser}
      - CUBE_DB_PASS=${POSTGRES_PASSWORD:-aiser_password}
      - CUBE_DB_SCHEMA=${CUBE_DB_SCHEMA:-public}
      - CUBE_REDIS_URL=${CUBE_REDIS_URL:-redis://redis:6379}
      - CUBEJS_API_SECRET=${CUBE_API_SECRET:-dev-cube-secret-key}
      - CUBEJS_DEV_MODE=${CUBE_DEV_MODE:-true}
      - CUBE_LOG_LEVEL=${CUBE_LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/cubejs-api/v1/load"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chat2Chart Server
  chat2chart-server:
    image: python:3.11-slim
    container_name: aiser-chat2chart
    working_dir: /app
    env_file:
      - .env
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_world}
      - POSTGRES_USER=${POSTGRES_USER:-aiser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiser_password}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2025-04-01-preview}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-5-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL_ID=${OPENAI_MODEL_ID:-gpt-4o-mini}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - CUBE_API_URL=http://cube-server:4000/cubejs-api/v1
      - CUBE_API_SECRET=${CUBE_API_SECRET:-dev-cube-secret-key}
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cube-server:
        condition: service_healthy
    volumes:
      - ./packages/chat2chart/server:/app
      - chat2chart_poetry_cache:/root/.cache/pypoetry
    command: >
      bash -c "
        apt-get update && apt-get install -y build-essential libpq-dev libjpeg-dev libpng-dev libfreetype6-dev libtiff5-dev libwebp-dev libopenjp2-7-dev zlib1g-dev curl unixodbc-dev &&
        pip install -r requirements.txt &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Frontend Client
  frontend-client:
    image: node:18-alpine
    container_name: aiser-client-dev
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_CUBE_API_URL=http://localhost:4000/cubejs-api/v1
    volumes:
      - ./packages/chat2chart/client:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next_cache:/app/.next
    command: >
      sh -c "
        npm install --legacy-peer-deps &&
        npm run dev
      "
    depends_on:
      - chat2chart-server
      - cube-server

volumes:
  postgres_data:
  redis_data:
  cube_node_modules:
  auth_poetry_cache:
  chat2chart_poetry_cache:
  frontend_node_modules:
  frontend_next_cache:

networks:
  default:
    name: aiser-network