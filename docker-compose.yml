services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aiser-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aiser_world}
      POSTGRES_USER: ${POSTGRES_USER:-aiser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiser_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiser} -d ${POSTGRES_DB:-aiser_world}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aiser-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Authentication Service
  auth-service:
    build:
      context: ./packages/auth
      dockerfile: Dockerfile.dev
    container_name: aiser-auth
    working_dir: /app
    env_file:
      - .env
    ports:
      - "5000:5000"
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_world}
      - POSTGRES_USER=${POSTGRES_USER:-aiser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiser_password}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - DEBUG=${DEBUG:-True}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./packages/auth:/app
      - auth_poetry_cache:/root/.cache/pypoetry
    # Use image built from Dockerfile.dev which installs dependencies at build time
    # CMD defined in Dockerfile.dev will start the uvicorn server

  # Cube.js Universal Semantic Layer (official image)
  cube-server:
    image: cubejs/cube:latest
    container_name: aiser-cube
    env_file:
      - .env
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - CUBE_DB_TYPE=${CUBE_DB_TYPE:-postgres}
      - CUBE_DB_HOST=${CUBE_DB_HOST:-postgres}
      - CUBE_DB_PORT=${CUBE_DB_PORT:-5432}
      - CUBE_DB_NAME=${POSTGRES_DB:-aiser_world}
      - CUBE_DB_USER=${POSTGRES_USER:-aiser}
      - CUBE_DB_PASS=${POSTGRES_PASSWORD:-aiser_password}
      - CUBE_DB_SCHEMA=${CUBE_DB_SCHEMA:-public}
      - CUBE_REDIS_URL=${CUBE_REDIS_URL:-redis://redis:6379}
      - CUBEJS_API_SECRET=${CUBE_API_SECRET:-dev-cube-secret-key}
      - CUBEJS_DEV_MODE=${CUBE_DEV_MODE:-true}
      - CUBE_LOG_LEVEL=${CUBE_LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      # Dev: avoid false negatives from missing tools inside the official image.
      # Use a no-op that always succeeds in dev; CI/prod should use a stricter check.
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 5s
      retries: 1

  # Chat2Chart Server - build image at build time to install Python deps there
  chat2chart-server:
    build:
      context: ./packages/chat2chart/server
      dockerfile: Dockerfile.dev
    container_name: aiser-chat2chart
    working_dir: /app
    env_file:
      - .env
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB:-aiser_world}
      - POSTGRES_USER=${POSTGRES_USER:-aiser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiser_password}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2025-04-01-preview}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-5-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL_ID=${OPENAI_MODEL_ID:-gpt-4o-mini}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - CUBE_API_URL=http://cube-server:4000/cubejs-api/v1
      - CUBE_API_SECRET=${CUBE_API_SECRET:-dev-cube-secret-key}
      - REDIS_URL=redis://redis:6379
      - FORCE_SYNC_CREATE=true
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./packages/chat2chart/server:/app
      - chat2chart_poetry_cache:/root/.cache/pypoetry
    # Use CMD from Dockerfile.dev which runs migrations and starts uvicorn

  # Frontend Client - build image so common deps are installed during build
  frontend-client:
    build:
      context: ./packages/chat2chart/client
      dockerfile: Dockerfile.dev
    container_name: aiser-client-dev
    working_dir: /app
    ports:
      # Map host 3001 to container 3000 to avoid conflicts on local host port 3000
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NPM_CONFIG_PRODUCTION=false
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
      - NEXT_PUBLIC_AUTH_URL=http://localhost:8000
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - AUTH_SERVICE_URL=http://auth-service:5000
      - NEXT_PUBLIC_CUBE_API_URL=http://localhost:4000/cubejs-api/v1
    volumes:
      - ./packages/chat2chart/client:/app
      - frontend_node_modules:/app/node_modules
      # Note: avoid mounting a persistent .next volume to prevent build/manifest
      # mismatches between host and container. The container will generate its
      # own .next during image startup/build instead.
      # - frontend_next_cache:/app/.next
    # Run in production mode to avoid HMR hot-update churn during debugging
    # Install deps into mounted node_modules volume (includes dev deps for PostCSS/Tailwind)
    command: sh -lc "npm install --no-audit --no-fund --include=dev && npm run build && npx next start -p 3000"
    depends_on:
      - chat2chart-server
      - cube-server

volumes:
  postgres_data:
  redis_data:
  cube_node_modules:
  auth_poetry_cache:
  chat2chart_poetry_cache:
  frontend_node_modules:
  frontend_next_cache:

networks:
  default:
    name: aiser-network