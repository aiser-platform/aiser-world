// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { NextApiHandler, ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}

type ApiRouteConfig = {
  default: (req: any, res: any) => ReturnType<NextApiHandler>
  config?: {
    api?: {
      bodyParser?: boolean | { sizeLimit?: string }
      responseLimit?: string | number | boolean
      externalResolver?: boolean
    }
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    maxDuration?: number
  }
}


// Validate ../../src/app/(auth)/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../src/app/(auth)/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(auth)/logout/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/logout">> = Specific
  const handler = {} as typeof import("../../src/app/(auth)/logout/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/ai-analytics/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/ai-analytics">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/ai-analytics/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/auth-debug/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth-debug">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/auth-debug/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/auth-test/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth-test">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/auth-test/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/billing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/billing">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/billing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/charts/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/charts">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/charts/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/chat/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/chat">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/chat/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/dash-studio/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dash-studio">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/dash-studio/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/dash-studio/test-charts/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dash-studio/test-charts">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/dash-studio/test-charts/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/dashboards/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboards">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/dashboards/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/data/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/data">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/data/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/projects/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/projects/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/general/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/general">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/general/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/notifications/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/notifications">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/notifications/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/profile">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/security/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/security">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/security/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/storage/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/storage">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/storage/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/team/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/team">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/team/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/test-auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-auth">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/test-auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/test-chat/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-chat">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/test-chat/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/dark-mode-validation/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dark-mode-validation">> = Specific
  const handler = {} as typeof import("../../src/app/dark-mode-validation/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/embedded/chart/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/embedded/chart/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/embedded/chart/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/simple-auth-test/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/simple-auth-test">> = Specific
  const handler = {} as typeof import("../../src/app/simple-auth-test/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-dark-mode/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-dark-mode">> = Specific
  const handler = {} as typeof import("../../src/app/test-dark-mode/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-dash-studio/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-dash-studio">> = Specific
  const handler = {} as typeof import("../../src/app/test-dash-studio/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-design-system/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-design-system">> = Specific
  const handler = {} as typeof import("../../src/app/test-design-system/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/tester/(pages)/charts/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/tester/charts">> = Specific
  const handler = {} as typeof import("../../src/app/tester/(pages)/charts/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/tester/(pages)/loading/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/tester/loading">> = Specific
  const handler = {} as typeof import("../../src/app/tester/(pages)/loading/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/tester/(pages)/upload/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/tester/upload">> = Specific
  const handler = {} as typeof import("../../src/app/tester/(pages)/upload/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/ai/chat/analyze/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/ai/chat/analyze">> = Specific
  const handler = {} as typeof import("../../src/app/api/ai/chat/analyze/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/ai/chat/stream/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/ai/chat/stream">> = Specific
  const handler = {} as typeof import("../../src/app/api/ai/chat/stream/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/conversations/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/conversations/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/conversations/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/conversations/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/conversations">> = Specific
  const handler = {} as typeof import("../../src/app/api/conversations/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/_error.tsx
{
  type __IsExpected<Specific extends PagesPageConfig> = Specific
  const handler = {} as typeof import("../../src/pages/_error.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/api/[...path].ts
{
  type __IsExpected<Specific extends ApiRouteConfig> = Specific
  const handler = {} as typeof import("../../src/pages/api/[...path].js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/api/auth/[...path].ts
{
  type __IsExpected<Specific extends ApiRouteConfig> = Specific
  const handler = {} as typeof import("../../src/pages/api/auth/[...path].js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/api/debug/client-error.ts
{
  type __IsExpected<Specific extends ApiRouteConfig> = Specific
  const handler = {} as typeof import("../../src/pages/api/debug/client-error.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/api/debug/echo.ts
{
  type __IsExpected<Specific extends ApiRouteConfig> = Specific
  const handler = {} as typeof import("../../src/pages/api/debug/echo.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(auth)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(auth)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
