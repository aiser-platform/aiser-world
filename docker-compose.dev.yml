services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aiser-postgres-dev
    environment:
      POSTGRES_DB: aiser_world
      POSTGRES_USER: aiser
      POSTGRES_PASSWORD: aiser_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./scripts/init-dev-data.sql:/docker-entrypoint-initdb.d/init-dev-data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiser -d aiser_world"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aiser-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend-server:
    build:
      context: ./packages/chat2chart/server
      dockerfile: Dockerfile.dev
    container_name: aiser-backend-dev
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=aiser_world
      - POSTGRES_USER=aiser
      - POSTGRES_PASSWORD=aiser_password
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379
      - API_SECRET_KEY=dev-secret-key-change-in-production
      - CUBE_API_SECRET=dev-cube-secret
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./packages/chat2chart/server:/app
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ðŸš€ Starting Aiser Backend Development Server...' &&
        pip install -r requirements.txt &&
        python scripts/setup_database.py &&
        python scripts/setup-organization.py || true && \
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend Client
  frontend-client:
    build:
      context: ./packages/chat2chart/client
      dockerfile: Dockerfile.dev
    container_name: aiser-frontend-dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./packages/chat2chart/client:/app
      - /app/node_modules
    depends_on:
      - backend-server
    command: >
      sh -c "
        echo 'ðŸš€ Starting Aiser Frontend Development Server...' &&
        npm install &&
        npm run dev
      "

  # Cube.js Server
  cube-server:
    image: cubejs/cube:latest
    container_name: aiser-cube-dev
    environment:
      CUBEJS_API_SECRET: dev-cube-secret
      CUBEJS_DB_TYPE: postgres
      CUBEJS_DB_HOST: postgres
      CUBEJS_DB_NAME: aiser_world
      CUBEJS_DB_USER: aiser
      CUBEJS_DB_PASS: aiser_password
      CUBEJS_DEV_MODE: 'true'
    ports:
      # Expose Cube internal API on host port 4001; the branded proxy will bind to 4000
      - "4001:4000"
      - "3031:3031"
    volumes:
      - ./packages/chat2chart/server/cube_schemas:/cube/conf/schema:ro
    depends_on:
      postgres:
        condition: service_healthy

  # Authentication Service
  auth-service:
    build:
      context: ./packages/auth-service
      dockerfile: Dockerfile.dev
    container_name: aiser-auth-dev
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=aiser_world
      - POSTGRES_USER=aiser
      - POSTGRES_PASSWORD=aiser_password
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - REDIS_URL=redis://redis:6379
    ports:
      - "5000:5000"
    volumes:
      - ./packages/auth-service:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ðŸš€ Starting Authentication Service...' &&
        pip install -r requirements.txt &&
        python -m uvicorn main:app --host 0.0.0.0 --port 5000 --reload
      "

  # Branded Cube UI reverse proxy
  cube-proxy:
    image: nginx:stable-alpine
    container_name: aiser-cube-proxy
    ports:
      - "4000:80"
    volumes:
      - ./nginx/cube-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/branding:/usr/share/nginx/html/branding:ro
    depends_on:
      - cube-server
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: